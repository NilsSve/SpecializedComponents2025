Use DFRptVw.pkg
Use Windows.pkg

Activate_View Activate_Reindex For Reindex

Object Reindex is a ReportView
    Set Label to "Reindex Tables Sample"
    Set Location to 6 5
    Set Size to 102 314
    
    // display current workspace to user when activating view
    Procedure Activating
        Forward Send Activating
        
        Send DisplayCurrentWorkspace
    End_Procedure
    
    // display current workspace to user
    Procedure DisplayCurrentWorkspace
        String sCurrentWorkspace
        
        Get psCurrentWorkspace of oMain to sCurrentWorkspace
        Set Value of oCurrentWorkspaceTextBox to ("Current Workspace: " + sCurrentWorkspace)
    End_Procedure
    
    Object oTextBox1 is a Textbox
        Set Auto_Size_State to False
        Set Label to "This sample demonstrates how to reindex all embedded database tables in a workspace."
        Set Location to 17 15
        Set Size to 9 284
    End_Object
    
    Object WorkSpaceBtn is a Button
        Set Label to "Select WorkSpace"
        Set Size to 14 75
        Set Location to 74 33
        Set Status_Help to "Select a WorkSpace"
        Set Default_State to True
        Set psToolTip to "Select workspace to have tables reindexed"
        
        Procedure OnClick
            Send SelectWorkSpace
            
            // display current workspace to user after selecting a workspace
            Send DisplayCurrentWorkspace
        End_Procedure
        
    End_Object
    
    Object oOK_bn is a Button
        Set Label to "&Start"
        Set Location to 74 141
        Set psToolTip to "Start reindexing tables in selected workspace"
        
        // Augmented to get the entered resize factor and apply it.
        Procedure OnClick
            Send ReindexFiles
        End_Procedure
        
        // Re-index all tables in the filelist.
        Procedure ReindexFiles
            String sRootName sSortString sReadyMsg
            Integer iTableNum iStatPan iNumTables iNumTablesAdjusted
            Boolean bErrTables bBadExists bTableIsOpen
            
            // Start the status panel
            Move (Status_Panel(Self)) to iStatPan
            If iStatPan Begin
                // Setup sentinel
                //Set Sentinel_Name Of iStatPan To "prgssent"
                
                Send Initialize_StatusPanel to iStatPan "Reindex Tables" "Searching Filelist" ""
                Send Start_StatusPanel to iStatPan
            End
            
            // Initialize table number; we will start searching the filelist at this number.
            Move 0 to iTableNum
            Move 0 to iNumTables
            Move 0 to iNumTablesAdjusted
            Move 0 to bErrTables
            Repeat
                // Get next used table number
                Get_Attribute DF_FILE_NEXT_USED of iTableNum to iTableNum
                If iTableNum Begin
                    // Count the tables
                    Increment iNumTables
                    
                    // Skip FlexErrs
                    Get_Attribute DF_FILE_ROOT_NAME of iTableNum to sRootName
                    If (Uppercase(Trim(sRootName)) <> "FLEXERRS") Begin
                        // Show table
                        If iStatPan ;
                            Send Update_StatusPanel to iStatPan ("Re-indexing file" * sRootName)
                        
                        // Open the table exclusively, we want to change it later.
                        Open iTableNum Mode DF_EXCLUSIVE
                        If (Found) ;
                            Move True to bTableIsOpen
                        If not (Found) ;
                            Move False to bTableIsOpen
                        
                        If bTableIsOpen Begin
                            Get IndexString iTableNum to sSortString
                            If (sSortString <> "") Begin
                                Increment iNumTablesAdjusted
                                
                                // Check for bad file and remove if exists
                                File_Exist (sRootName + ".BAD") bBadExists
                                If bBadExists ;
                                    EraseFile (FindFile(sRootName + ".BAD"))
                                
                                // Re-index all indexes of the table
                                Sort iTableNum sSortString ;
                                (DF_SORT_OPTION_BAD_DATA_FILE IOr DF_SORT_OPTION_DUP_DATA_FILE) (oMain(Self))
                                Close iTableNum
                                
                                // Check for bad file: if it exists, something went wrong
                                File_Exist (sRootName + ".BAD") bBadExists
                                If bBadExists ;
                                    Increment bErrTables
                            End
                        End
                    End
                    Else Begin
                        If iStatPan ;
                            Send Update_StatusPanel of iStatPan ("Skip" * sRootName)
                    End
                End
            Until (iTableNum = 0)
            
            // Stop progress messages
            If iStatPan ;
                Send Stop_StatusPanel of iStatPan
            
            // Show that you are ready
            Move ("Re-indexed" * String(iNumTablesAdjusted) * "of" * String(iNumTables) * "tables") to sReadyMsg
            If bErrTables ;
                Move (Append(sReadyMsg, ;
                ("\nBad or duplicate data was detected in" * String(bErrTables) ;
                * "tables. Check the .bad files for details."))) to sReadyMsg
            Send Info_Box sReadyMsg
        End_Procedure
        
        // Determine the available indexes of a table.
        //
        // Arguments:
        //   Integer iTableNum - The number of the table
        //
        // Returns:
        //   String - The string to be used in the sort command if you want
        //   to re-index all indexes of the table
        Function IndexString Integer iTableNum Returns String
            String  sSortString
            Integer iLastIndex iNumSegments iCount
            
            // Initilaize
            Move "" to sSortString
            Get_Attribute DF_FILE_LAST_INDEX_NUMBER of iTableNum to iLastIndex
            For iCount From 1 to iLastIndex
                Get_Attribute DF_INDEX_NUMBER_SEGMENTS of iTableNum iCount to iNumSegments
                If iNumSegments Begin
                    If (Length(sSortString)) ;
                        Move (Append(sSortString, " ")) to sSortString
                    Move (Append(sSortString, iCount)) to sSortString
                End
            Loop
            
            Function_Return sSortString
        End_Function
        
    End_Object
    
    Object oCancel_bn is a Button
        
        Set Label to "&Cancel"
        Set Location to 74 225
        
        // Augmented to cancel the view
        Procedure OnClick
            Send Request_Cancel
        End_Procedure
        
    End_Object
    
    Object oCurrentWorkspaceTextBox is a TextBox
        Set Size to 50 14
        Set Location to 48 14
        Set Label to "Current Workspace: "
    End_Object
    
End_Object
